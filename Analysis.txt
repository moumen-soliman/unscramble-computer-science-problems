# Run time analysis
This file explains the run time analysis (Worst Case Big O Notation) for each solution they produced. 
Used https://www.bigocheatsheet.com/ as reference

## Task0
The Task0 runs in O(1), because we are directly accesing the first and last item (using -1 to directly get the last position) of an array.
According to stackoverflow , because you need only the start position in memory , plus the array position.


## Task1
Set Access time is O(1), but we are also doing FORs , and this is O(n).
While we are doing two fors (2 * O(n)), we remove the constant leaving O(n)

## Task2
Same as the previous tasks, we are only using 2 FORs and they are O(n) 

## Task3
We are using FORs ( O(n)), array accesing ( O(1)) but we are also doing a sort, and according to the docs
sort have O(nlogn) in the worst case.
So, the complexity is O(nlogn) as that is the slowest one of all the complexity we have

## Task4
We are doing many FORs ((0(n))) but also doing a sort, and for the same reason as the previous task
we are keeping the complexity of the sort , so 0(nlogn)